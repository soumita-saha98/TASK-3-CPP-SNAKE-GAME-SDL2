#include <SDL.h>
#include <SDL_ttf.h>
#include <SDL_mixer.h>
#include <iostream>
#include <vector>
#include <ctime>
#include <string>

const int WIDTH = 640;
const int HEIGHT = 480;
const int TILE_SIZE = 20;
const int COLS = WIDTH / TILE_SIZE;
const int ROWS = HEIGHT / TILE_SIZE;

enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };
Direction dir = STOP;

struct Point { int x, y; };

std::vector<Point> snake;
Point fruit;
int score = 0;
float delay = 0.15f;
Uint32 lastMoveTime = 0;
Mix_Chunk* eatSound = nullptr;
TTF_Font* font = nullptr;

SDL_Window* window = nullptr;
SDL_Renderer* renderer = nullptr;

void spawnFruit() {
    fruit.x = rand() % COLS;
    fruit.y = rand() % ROWS;
}

bool checkCollision() {
    if (snake[0].x < 0 || snake[0].x >= COLS || snake[0].y < 0 || snake[0].y >= ROWS)
        return true;

    for (size_t i = 1; i < snake.size(); ++i)
        if (snake[i].x == snake[0].x && snake[i].y == snake[0].y)
            return true;

    return false;
}

void moveSnake() {
    for (int i = snake.size() - 1; i > 0; --i)
        snake[i] = snake[i - 1];

    switch (dir) {
        case LEFT:  snake[0].x--; break;
        case RIGHT: snake[0].x++; break;
        case UP:    snake[0].y--; break;
        case DOWN:  snake[0].y++; break;
        default: break;
    }

    if (snake[0].x == fruit.x && snake[0].y == fruit.y) {
        snake.push_back({0, 0});
        score += 10;
        spawnFruit();
        if (eatSound) Mix_PlayChannel(-1, eatSound, 0);
        if (delay > 0.05f) delay -= 0.005f;
    }
}

void drawText(const std::string& text, int x, int y, SDL_Color color, int fontSize) {
    if (!font) return;

    SDL_Surface* surface = TTF_RenderText_Solid(font, text.c_str(), color);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);

    SDL_Rect dst;
    dst.x = x;
    dst.y = y;
    dst.w = surface->w;
    dst.h = surface->h;

    SDL_RenderCopy(renderer, texture, NULL, &dst);
    SDL_FreeSurface(surface);
    SDL_DestroyTexture(texture);
}

void drawGame(bool showScore = true) {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    // Draw fruit
    SDL_Rect fruitRect = {fruit.x * TILE_SIZE, fruit.y * TILE_SIZE, TILE_SIZE, TILE_SIZE};
    SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_RenderFillRect(renderer, &fruitRect);

    // Draw snake
    for (const auto& s : snake) {
        SDL_Rect rect = {s.x * TILE_SIZE, s.y * TILE_SIZE, TILE_SIZE, TILE_SIZE};
        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
        SDL_RenderFillRect(renderer, &rect);
    }

    // Draw score
    if (showScore) {
        SDL_Color white = {255, 255, 255};
        drawText("Score: " + std::to_string(score), 10, 10, white, 24);
    }

    SDL_RenderPresent(renderer);
}

void showGameOver() {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    SDL_Color red = {255, 0, 0};
    drawText("GAME OVER", WIDTH / 2 - 80, HEIGHT / 2 - 30, red, 32);

    SDL_Color white = {255, 255, 255};
    drawText("Final Score: " + std::to_string(score), WIDTH / 2 - 80, HEIGHT / 2 + 10, white, 24);
    drawText("Press Enter to Restart or ESC to Quit", WIDTH / 2 - 150, HEIGHT / 2 + 50, white, 20);

    SDL_RenderPresent(renderer);
}

bool showMainMenu() {
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);

    SDL_Color white = {255, 255, 255};
    drawText("SNAKE GAME", WIDTH / 2 - 80, HEIGHT / 2 - 60, white, 32);
    drawText("Press ENTER to Start", WIDTH / 2 - 100, HEIGHT / 2, white, 24);
    drawText("Press ESC to Exit", WIDTH / 2 - 80, HEIGHT / 2 + 40, white, 24);

    SDL_RenderPresent(renderer);

    SDL_Event e;
    while (true) {
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT) return false;
            if (e.type == SDL_KEYDOWN) {
                if (e.key.keysym.sym == SDLK_RETURN) return true;
                if (e.key.keysym.sym == SDLK_ESCAPE) return false;
            }
        }
        SDL_Delay(10);
    }
}

void resetGame() {
    dir = STOP;
    score = 0;
    delay = 0.15f;
    snake = {{COLS / 2, ROWS / 2}};
    spawnFruit();
    lastMoveTime = SDL_GetTicks();
}

int main() {
    srand(static_cast<unsigned>(time(0)));

    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO) != 0) {
        std::cerr << "SDL Error: " << SDL_GetError() << "\n";
        return 1;
    }

    if (TTF_Init() == -1) {
        std::cerr << "TTF Error: " << TTF_GetError() << "\n";
        return 1;
    }

    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0) {
        std::cerr << "Mixer Error: " << Mix_GetError() << "\n";
        return 1;
    }

    window = SDL_CreateWindow("Snake Game (SDL2)", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    font = TTF_OpenFont("Arial.ttf", 24);
    if (!font) {
        std::cerr << "Font load error\n";
        return 1;
    }

    eatSound = Mix_LoadWAV("eat.wav");

    bool running = showMainMenu();

    while (running) {
        resetGame();
        bool gameOver = false;

        while (!gameOver) {
            SDL_Event e;
            while (SDL_PollEvent(&e)) {
                if (e.type == SDL_QUIT) return 0;
                if (e.type == SDL_KEYDOWN) {
                    switch (e.key.keysym.sym) {
                        case SDLK_UP:    if (dir != DOWN) dir = UP; break;
                        case SDLK_DOWN:  if (dir != UP) dir = DOWN; break;
                        case SDLK_LEFT:  if (dir != RIGHT) dir = LEFT; break;
                        case SDLK_RIGHT: if (dir != LEFT) dir = RIGHT; break;
                        case SDLK_ESCAPE: return 0;
                    }
                }
            }

            if ((SDL_GetTicks() - lastMoveTime) / 1000.0f >= delay) {
                lastMoveTime = SDL_GetTicks();
                moveSnake();
                if (checkCollision()) gameOver = true;
            }

            drawGame();
            SDL_Delay(10);
        }

        showGameOver();

        // Wait for user input
        bool waiting = true;
        while (waiting) {
            SDL_Event e;
            while (SDL_PollEvent(&e)) {
                if (e.type == SDL_QUIT) return 0;
                if (e.type == SDL_KEYDOWN) {
                    if (e.key.keysym.sym == SDLK_RETURN) waiting = false;
                    if (e.key.keysym.sym == SDLK_ESCAPE) return 0;
                }
            }
            SDL_Delay(10);
        }
    }

    // Cleanup
    Mix_FreeChunk(eatSound);
    Mix_CloseAudio();
    TTF_CloseFont(font);
    TTF_Quit();
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
